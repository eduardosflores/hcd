{% block jqueryautocomplete_widget %}


    {% spaceless %}

        <script type="text/javascript">
            /*
             * Revisar si esta fn es necesaria en el futuro. Por el momento no se esta utilizando
             * @author santiago.semhan
             */
            jQuery(document).ready(function ($) {
                $('#suggest_{{ id }}').autocomplete({
                    source: function (request, response) {
                        block_prevent = true;
                        $.getJSON(
                            "{{path(route_name)}}",
                            {
                                term: this.term,
                                class: "{{class}}",
                                property: "{{choice_label}}",
                                search_method: "{{search_method}}"
                                {% if extraParams is defined  %}
                                {#,extraParams: {{extraParams | raw}}#}
                                , extraParams: {
                                    {% for key, value in extraParams %}
                                    "{{ key }}": {{ value | raw}}, {% endfor %}
                                }
                                {% endif %}
                            },
                            response
                        );
                        block_prevent = false;
                    },
                    minLength: 2,
                    select: function (event, ui) {
                        if (ui.item.id === undefined) {
                            $('#{{ id}}').val('').trigger('clear');
                            $('#suggest_{{ id}}').val('');
                            return false;
                        } else {
                            $('#{{ id}}').val(ui.item.id).trigger('change');
                        }
                    }
                })
                {% if(tpl) %}
                    .data("ui-autocomplete")._renderItem = function (ul, item) {
                    return $("<li>")
                    //.append( "<a>" + item.label + "<br><strong>" + item.extra + "</strong></a>" )
                        .append("{{ tpl |raw}}")
                        .appendTo(ul);
                }
                {% endif %}
                ;
            });</script>
        <style>
            .ui-corner-all
            {
                -moz-border-radius: 4px 4px 4px 4px;
            }
            .ui-widget-content
            {
                border: 5px solid black;
                color: #222222;
                background-color: #fff;
            }
            .ui-widget
            {
                font-family: Verdana,Arial,sans-serif;
                font-size: 15px;
            }
            .ui-menu
            {
                display: block;
                float: left;
                list-style: none outside none;
                margin: 0;
                padding: 2px;
            }
            .ui-autocomplete
            {
                cursor: default;
                position: absolute;
            }
            .ui-menu .ui-menu-item
            {
                clear: left;
                float: left;
                margin: 0;
                padding: 2%;
                width: 100%;
            }
            .ui-menu .ui-menu-item a
            {
                display: block;
                padding: 3px 3px 3px 3px;
                text-decoration: none;
                cursor: pointer;
                background-color: Green;
            }
            .ui-menu .ui-menu-item a:hover
            {
                display: block;
                padding: 3px 3px 3px 3px;
                text-decoration: none;
                color: White;
                cursor: pointer;
                background-color: ButtonText;
            }
            .ui-widget-content a
            {
                color: #222222;
            }
        </style>

    {% endspaceless %}

    {#{% endblock javascripts %}#}
    {{ block('hidden_widget') }}

    {% set id = 'suggest_'~id %}
    {% set full_name = 'suggest_'~full_name %}
    {% set value = suggest_value %}
    {% set class = form.vars.attr.class | default('') %}
    <input type="text"
           class="form-control {{ class }}" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
{% endblock %}

{% block bootstrapcollection_widget %}
    {% block javascripts %}

        {% set itemsCount = form.vars.data is not null ? form  | length : 0 %}

        <script type="text/javascript">

            var itemCant{{ form.vars.id }} = {{ itemsCount | default(0) }};
            $(document).ready(function () {

                $('#{{ form.vars.id }} .bootstrapcollection-agregar-otro-item').click(function () {

                    var itemList = $('#{{ form.vars.id }} table');
                    if (itemList.find('tbody tr').length < {{ max_items_add }}) {

                        var newWidget = itemList.data('prototype');
                        newWidget = newWidget.replace(/{{ prototype_name }}/g, itemCant{{ form.vars.id }});
                        var newTr = $('<tr item="' + itemCant{{ form.vars.id }} + '"></tr>').html(newWidget);
                        itemCant{{ form.vars.id }}++;
                        newTr.appendTo(itemList);
                    }
                    inicializarPlugins(newTr);
                });

            });</script>
    {% endblock javascripts %}

    {% spaceless %}

        {% set form_prototype %}
            {% for widget_prototype in form.vars.prototype %}
                <td>
                    {{ form_errors(widget_prototype) }}
                    {{ form_widget(widget_prototype) }}
                </td>
            {% endfor %}
            <td class="cell-center">
                <a class="btn btn-default" title="Borrar item"
                   href="javascript:void(0)"
                   onclick="bootstrapCollectionBorrarItem(this);">
                    <i class="fa fa-fw fa-trash-o"></i>
                </a>
            </td>
        {% endset %}

        <div id="{{ form.vars.id }}" class="bootstrapcollection">

            <table class="table table-striped table-bordered"
                   data-prototype="{{ form_prototype |e }}">

                <thead>
                <tr>
                    {% for widget_prototype in form.vars.prototype %}
                        <th>
                            {{ widget_prototype.vars.label |default(widget_prototype.vars.name|humanize) }}
                        </th>
                    {% endfor %}
                    <th style="width: 50px;">{{ 'Accion' |trans }}</th>
                </tr>
                </thead>

                <tbody>

                {% for child in form %}
                    <tr item="{{ loop.index0 }}" {% if child.vars.valid %} class="bootstrap-collection-history {% if not display_history %} hidden{% endif %}" {% endif %}>
                        {% for widget in child %}
                            <td>
                                {{ form_errors(widget) }}
                                {{ form_widget(widget) }}
                            </td>
                        {% endfor %}

                        {% if child.vars.valid %}
                            <td class="cell-center">
                                {% if form.vars.allow_delete %}
                                    <a class="btn btn-default" title="Borrar item"
                                       href="javascript:void(0)"
                                       onclick="bootstrapCollectionBorrarItem(this);">
                                        <i class="fa fa-fw fa-trash-o"></i>
                                    </a>
                                {% endif %}
                            </td>
                        {% else %}
                            <td class="cell-center">
                                <a class="btn btn-default"
                                   title="Borrar item"
                                   href="javascript:void(0)"
                                   onclick="bootstrapCollectionBorrarItem(this);">
                                    <i class="fa fa-fw fa-trash-o"></i>
                                </a>
                            </td>
                        {% endif %}
                    </tr>
                {% endfor %}

                </tbody>

            </table>
            {#{% if form.vars.max_items_add < (form.vars.data | length) %}#}
            <div class="box-footer clearfix no-border">
                <a class="btn btn-default pull-right bootstrapcollection-agregar-otro-item">
                    <i class="fa fa-plus"></i> {{ 'Agregar' |trans }}</a>
            </div>
            {#{% endif %}#}
            <br>
        </div>
    {% endspaceless %}
{% endblock bootstrapcollection_widget %}

{% block tetranz_select2entity_widget %}
    {% set attr = attr|merge({
    'data-multiple':multiple ? 1:0,
    'data-rpath':remote_path,
    'data-value':value,
    'data-min-length':minimum_input_length,
    'data-page-limit':page_limit,
    'data-data-type':data_type,
    'data-placeholder':placeholder,
    'data-allow-clear': required ? "false":"true"
    }) %}

    {# Add class for jQuery for find it #}
    {% set attr = attr|merge({ 'class': (attr.class|default('') ~ ' select2entity')|trim }) %}

    {# A bit of a hack here.
    It seems to work more smoothly if we put the initial value into data-value rather than the value attribute.
    But ... value needs to be non-blank for initSelection in the js to fire.
    We need to remove this value in EntitiesToPropertyTransformer #}
    {% set value = 'x' %}

    {#{% set type = type|default('hidden') %}#}
    {#{{ block('form_widget_simple') }}#}
    {% set expanded = false %}
    {% set preferred_choices = {} %}
    {% set choices = {} %}
    {{ block('choice_widget') }}

{% endblock %}
