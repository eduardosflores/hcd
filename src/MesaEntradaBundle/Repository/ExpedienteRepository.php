<?php

namespace MesaEntradaBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ExpedienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpedienteRepository extends EntityRepository {
	public function search( $data ) {
		$qb = $this->createQueryBuilder( 'e' );

		$qb->where( 'e.expediente = :expediente' );

		$qb->setParameter( 'expediente', $data['expediente'] );

// ['tipoExpediente']
// ['expediente']
// ['anio']
// ['letra']
// ['fecha']
// ['registroMunicipal']
// ['areaAdministrativa']
// ['iniciador'] =>
// ['iniciadorParticular']

		return $qb->getQuery()->getResult();

	}

	public function getQbAll() {
		$qb = $this->createQueryBuilder( 'e' );

		$qb->orderBy( 'e.id', 'DESC' );

		return $qb;
	}

	public function getQbBuscar( $data ) {
		$qb = $this->getQbAll();

		if ( isset( $data['tipoExpediente'] ) ) {
			$qb->andWhere( 'e.tipoExpediente = :tipoExpediente' )
			   ->setParameter( 'tipoExpediente', $data['tipoExpediente'] );
		}
		if ( $data['textoDefinitivo'] ) {
			$q = $data['textoDefinitivo'];
			$qb->andWhere( "upper(e.textoDefinitivo) LIKE upper(:textoDefinitivo)" )
			   ->setParameter( 'textoDefinitivo', "%$q%" );
		}
		if ( $data['extracto'] ) {
			$q = $data['extracto'];
			$qb->andWhere( 'UPPER(e.extracto) LIKE UPPER(:extracto)' )
			   ->setParameter( 'extracto', "%$q%" );
		}
		if ( $data['expediente'] ) {
			$q = $data['expediente'];
			$qb->andWhere( 'UPPER(e.expediente) LIKE UPPER(:expediente)' )
			   ->setParameter( 'expediente', "%$q%" );
		}
		if ( $data['letra'] ) {
			$q = $data['letra'];
			$qb->andWhere( 'UPPER(e.letra) LIKE UPPER(:letra)' )
			   ->setParameter( 'letra', "%$q%" );
		}
		if ( $data['registroMunicipal'] ) {
			$q = $data['registroMunicipal'];
			$qb->andWhere( 'UPPER(e.registroMunicipal) LIKE UPPER(:registroMunicipal)' )
			   ->setParameter( 'registroMunicipal', "%$q%" );
		}
		if ( $data['iniciador'] ) {
//			$qb->andWhere( 'e.iniciador = :iniciador' )
//			   ->setParameter( 'iniciador', $data['iniciador'] );
			$q = $data['iniciador'];
			$qb->join( 'e.iniciador', 'iniciador' )
			   ->andWhere( 'upper(iniciador.nombre) LIKE upper(:iniciador)' )
			   ->setParameter( 'iniciador', "%$q%" );
		}
		if ( $data['iniciadorParticular'] ) {

			$q = $data['iniciadorParticular'];
			$qb->join( 'e.iniciadorParticular', 'iniciadorParticular' )
			   ->andWhere( 'upper(iniciadorParticular.nombre) LIKE upper(:iniciadorParticular)' )
			   ->setParameter( 'iniciadorParticular', "%$q%" );
		}
		if ( $data['dependencia'] ) {
			$q = $data['dependencia'];
			$qb->join( 'e.dependencia', 'dependencia' )
			   ->andWhere( 'upper(dependencia.nombre) LIKE upper(:dependencia)' )
			   ->setParameter( 'dependencia', "%$q%" );
		}

		if ( ( $data['fecha'] ) ) {
			$qb->andWhere( 'e.fecha = :fecha' );
			$qb->setParameter( 'fecha', $data['fecha'] );
		}
		if ( ( $data['anio'] ) ) {
			$qb->andWhere( 'e.anio = :anio' );
			$qb->setParameter( 'anio', $data['anio'] );
		}

		return $qb;

	}
}
